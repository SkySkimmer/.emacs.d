#+STARTUP: overview

* Backups
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq delete-old-versions -1)
  (setq version-control t)
  (setq vc-make-backup-files t)
#+END_SRC
This bit is for the # anti-crash files
#+BEGIN_SRC emacs-lisp
  (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC



* History
This is mostly minibuffer history. Not sure it works with counsel, we shall see.
#+BEGIN_SRC emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+END_SRC


* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq ls-lisp-dirs-first t)
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(defalias 'list-buffers 'ibuffer)
(show-paren-mode 1)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(delete-selection-mode 1); delete selected region on typing
(line-number-mode 1)
(column-number-mode 1)
(setq-default indent-tabs-mode nil)
(setq require-final-newline t)
(setq diff-switches "-u"); unified diffs
#+END_SRC

** Clipboard integration
   #+BEGIN_SRC emacs-lisp
     (setq x-select-enable-clipboard t)
     ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
     (setq save-interprogram-paste-before-kill t)
     (setq kill-do-not-save-duplicates t)
   #+END_SRC

** highlight current line
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode t)
   (set-face-background hl-line-face "alice blue")
   #+END_SRC

** File ignores
   This is actually further processed in the Swiper section.
   #+BEGIN_SRC emacs-lisp
     (setq file-ignore-patterns
           (list "~$"
            "^\\."
            "\\.mli?\\.d$"
            "\\.mllib\\.d$"
            "\\.cm[iotx]$"
            "\\.cmti$"
            "\\.o$"))
   #+END_SRC

** Scroll
   #+BEGIN_SRC emacs-lisp
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (setq mouse-wheel-progressive-speed nil)
   #+END_SRC

** Move to beginning of line
   #+BEGIN_SRC emacs-lisp
     (defun my/smarter-move-beginning-of-line (arg)
       "Move point back to indentation of beginning of line.

     Move point to the first non-whitespace character on this line.
     If point is already there, move to the beginning of the line.
     Effectively toggle between the first non-whitespace character and
     the beginning of the line.

     If ARG is not nil or 1, move forward ARG - 1 lines first.  If
     point reaches the beginning or end of the buffer, stop there."
       (interactive "^p")
       (setq arg (or arg 1))

       ;; Move lines first
       (when (/= arg 1)
         (let ((line-move-visual nil))
           (forward-line (1- arg))))

       (let ((orig-point (point)))
         (back-to-indentation)
         (when (= orig-point (point))
           (move-beginning-of-line 1))))

     ;; remap C-a to `smarter-move-beginning-of-line'
     (global-set-key [remap move-beginning-of-line]
                     'my/smarter-move-beginning-of-line)
   #+END_SRC


* Unicode
#+BEGIN_SRC emacs-lisp
(set-charset-priority 'unicode)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC


* Immortal *scratch*
#+BEGIN_SRC emacs-lisp
(defadvice kill-buffer (around kill-buffer-around-advice activate)
  (let ((buffer-to-kill (ad-get-arg 0)))
    (if (equal buffer-to-kill "*scratch*")
        (bury-buffer)
      ad-do-it)))
#+END_SRC

* Prettify symbols
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (push '("lambda" . ?λ) prettify-symbols-alist)))
  (add-hook 'clojure-mode-hook
            (lambda ()
              (push '("fn" . ?ƒ) prettify-symbols-alist)))
  (global-prettify-symbols-mode +1)
#+END_SRC


* try
#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC


* which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC


* org mode
#+BEGIN_SRC emacs-lisp
  (setq
   org-src-fontify-natively t
   org-startup-indented t
   org-src-tab-acts-natively t)

  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC


* Window switching (Ace window)
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :init
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    )
#+END_SRC


* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    (setq counsel-find-file-ignore-regexp
          (reduce
           (lambda (x y) (concat x "\\|" y))
           (mapcar
            (lambda (x) (concat "\\(?:" x "\\)"))
            file-ignore-patterns)))
    )
#+END_SRC

* Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :diminish ('auto-complete-mode . "↝")
    :init
    (ac-config-default)
    (global-auto-complete-mode t)
    )
#+END_SRC


* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC

* OCaml
#+BEGIN_SRC emacs-lisp
    (use-package tuareg
      :diminish merlin-mode)

    (use-package flycheck-ocaml
      :init
      (with-eval-after-load 'merlin
        ;; Disable Merlin's own error checking
        (setq merlin-error-after-save nil)
        (setq merlin-command "/home/gaetan/.opam/system/bin/ocamlmerlin")
        ;; Enable Flycheck checker
        (flycheck-ocaml-setup))

      (add-hook 'tuareg-mode-hook 'merlin-mode))
#+END_SRC

* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC

* Whitespace
  #+BEGIN_SRC emacs-lisp
    (setq show-trailing-whitespace t)
  #+END_SRC

** ws-butler (unobtrusive whitespace remover)
   #+BEGIN_SRC emacs-lisp
     (use-package ws-butler
       :ensure t
       :diminish ws-butler-mode
       :init
       (add-hook 'prog-mode-hook #'ws-butler-mode)
       (add-hook 'org-mode-hook #'ws-butler-mode)
       (add-hook 'text-mode-hook #'ws-butler-mode))
   #+END_SRC




* Semantic region
#+BEGIN_SRC emacs-lisp
  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC


* Narrowing
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))

  ;; This line actually replaces Emacs' entire narrowing
  ;; keymap, that's how much I like this command. Only
  ;; copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (define-key LaTeX-mode-map "\C-xn"
                nil)))
#+END_SRC


* Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-visualizer-timestamps t))
#+END_SRC


* Proof General
#+BEGIN_SRC emacs-lisp
  (load "~/.emacs.d/lisp/PG/generic/proof-site")

  (setq proof-prog-name-ask t)
#+END_SRC
