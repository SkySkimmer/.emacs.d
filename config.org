#+STARTUP: overview

* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(defalias 'list-buffers 'ibuffer)
(setq save-interprogram-paste-before-kill t)
(show-paren-mode 1)
#+END_SRC

** highlight current line
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode t)
   (set-face-background hl-line-face "alice blue")
   #+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

* which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:config
	(which-key-mode))
#+END_SRC

* org mode
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Window switching (Ace window)
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :init
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    )
#+END_SRC

* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    )
#+END_SRC
* OCaml
#+BEGIN_SRC emacs-lisp
(use-package tuareg)
#+END_SRC
