#+STARTUP: overview

* interface tweaks
#+BEGIN_SRC emacs-lisp
(setq ls-lisp-dirs-first t)
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)
(defalias 'list-buffers 'ibuffer)
(show-paren-mode 1)
(add-to-list 'default-frame-alist '(fullscreen . maximized))
(delete-selection-mode 1); delete selected region on typing
(line-number-mode 1)
(column-number-mode 1)
(setq-default indent-tabs-mode nil)
(setq require-final-newline t)
(setq diff-switches "-u"); unified diffs
#+END_SRC
** Clipboard integration
   #+BEGIN_SRC emacs-lisp
     (setq x-select-enable-clipboard t)
     ;; Treat clipboard input as UTF-8 string first; compound text next, etc.
     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
     (setq save-interprogram-paste-before-kill t)
     (setq kill-do-not-save-duplicates t)
   #+END_SRC

** highlight current line
   #+BEGIN_SRC emacs-lisp
   (global-hl-line-mode t)
   (set-face-background hl-line-face "alice blue")
   #+END_SRC

* Unicode
#+BEGIN_SRC emacs-lisp
(set-charset-priority 'unicode)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC

* Immortal *scratch*
#+BEGIN_SRC emacs-lisp
(defadvice kill-buffer (around kill-buffer-around-advice activate)
  (let ((buffer-to-kill (ad-get-arg 0)))
    (if (equal buffer-to-kill "*scratch*")
        (bury-buffer)
      ad-do-it)))
#+END_SRC
* Prettify symbols
#+BEGIN_SRC emacs-lisp
  (add-hook 'emacs-lisp-mode-hook
            (lambda ()
              (push '("lambda" . ?λ) prettify-symbols-alist)))
  (add-hook 'clojure-mode-hook
            (lambda ()
              (push '("fn" . ?ƒ) prettify-symbols-alist)))
  (global-prettify-symbols-mode +1)
#+END_SRC

* try
#+BEGIN_SRC emacs-lisp
(use-package try)
#+END_SRC

* which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
	:config
	(which-key-mode))
#+END_SRC

* org mode
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)

(use-package org-bullets
	:config
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Window switching (Ace window)
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :init
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))
    )
#+END_SRC

* Swiper
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))

  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy))

  (use-package swiper
    :ensure try
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    )
#+END_SRC
* Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :init
    (ac-config-default)
    (global-auto-complete-mode t)
    )
#+END_SRC

* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+END_SRC
* Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
* OCaml
#+BEGIN_SRC emacs-lisp
  (use-package tuareg)

  (use-package flycheck-ocaml
    :init
    (with-eval-after-load 'merlin
      ;; Disable Merlin's own error checking
      (setq merlin-error-after-save nil)
      (setq merlin-command "/home/gaetan/.opam/system/bin/ocamlmerlin")
      ;; Enable Flycheck checker
      (flycheck-ocaml-setup))

    (add-hook 'tuareg-mode-hook 'merlin-mode))
#+END_SRC
* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode)
#+END_SRC
* ws-butler (unobtrusive whitespace remover)
#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :ensure t
  :diminish ws-butler-mode
  :init
  (add-hook 'prog-mode-hook #'ws-butler-mode)
  (add-hook 'org-mode-hook #'ws-butler-mode)
  (add-hook 'text-mode-hook #'ws-butler-mode))
#+END_SRC
